// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dictionary_manage_grpc_service.proto

package archradar_grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _dictionary_manage_grpc_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DictionaryCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DictionaryCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetDictionaryUuid()); err != nil {
		return DictionaryCreateRequestValidationError{
			field:  "DictionaryUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DictType

	if l := utf8.RuneCountInString(m.GetTitle()); l < 4 || l > 128 {
		return DictionaryCreateRequestValidationError{
			field:  "Title",
			reason: "value length must be between 4 and 128 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetColor()) != 7 {
		return DictionaryCreateRequestValidationError{
			field:  "Color",
			reason: "value length must be 7 runes",
		}

	}

	// no validation rules for Description

	return nil
}

func (m *DictionaryCreateRequest) _validateUuid(uuid string) error {
	if matched := _dictionary_manage_grpc_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DictionaryCreateRequestValidationError is the validation error returned by
// DictionaryCreateRequest.Validate if the designated constraints aren't met.
type DictionaryCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictionaryCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictionaryCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictionaryCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictionaryCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictionaryCreateRequestValidationError) ErrorName() string {
	return "DictionaryCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DictionaryCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictionaryCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictionaryCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictionaryCreateRequestValidationError{}

// Validate checks the field values on DictionaryUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DictionaryUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetDictionaryUuid()); err != nil {
		return DictionaryUpdateRequestValidationError{
			field:  "DictionaryUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DictType

	// no validation rules for Title

	// no validation rules for Color

	// no validation rules for Description

	return nil
}

func (m *DictionaryUpdateRequest) _validateUuid(uuid string) error {
	if matched := _dictionary_manage_grpc_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DictionaryUpdateRequestValidationError is the validation error returned by
// DictionaryUpdateRequest.Validate if the designated constraints aren't met.
type DictionaryUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictionaryUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictionaryUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictionaryUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictionaryUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictionaryUpdateRequestValidationError) ErrorName() string {
	return "DictionaryUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DictionaryUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictionaryUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictionaryUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictionaryUpdateRequestValidationError{}

// Validate checks the field values on DictionaryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DictionaryDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetDictionaryUuid()); err != nil {
		return DictionaryDeleteRequestValidationError{
			field:  "DictionaryUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *DictionaryDeleteRequest) _validateUuid(uuid string) error {
	if matched := _dictionary_manage_grpc_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DictionaryDeleteRequestValidationError is the validation error returned by
// DictionaryDeleteRequest.Validate if the designated constraints aren't met.
type DictionaryDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictionaryDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictionaryDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictionaryDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictionaryDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictionaryDeleteRequestValidationError) ErrorName() string {
	return "DictionaryDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DictionaryDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictionaryDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictionaryDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictionaryDeleteRequestValidationError{}

// Validate checks the field values on DictionaryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DictionaryListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DictType

	return nil
}

// DictionaryListRequestValidationError is the validation error returned by
// DictionaryListRequest.Validate if the designated constraints aren't met.
type DictionaryListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictionaryListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictionaryListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictionaryListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictionaryListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictionaryListRequestValidationError) ErrorName() string {
	return "DictionaryListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DictionaryListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictionaryListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictionaryListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictionaryListRequestValidationError{}

// Validate checks the field values on DictionaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DictionaryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetDictionaryUuid()); err != nil {
		return DictionaryResponseValidationError{
			field:  "DictionaryUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DictType

	// no validation rules for Title

	// no validation rules for Color

	// no validation rules for Description

	return nil
}

func (m *DictionaryResponse) _validateUuid(uuid string) error {
	if matched := _dictionary_manage_grpc_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DictionaryResponseValidationError is the validation error returned by
// DictionaryResponse.Validate if the designated constraints aren't met.
type DictionaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictionaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictionaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictionaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictionaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictionaryResponseValidationError) ErrorName() string {
	return "DictionaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DictionaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictionaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictionaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictionaryResponseValidationError{}

// Validate checks the field values on DictionaryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DictionaryListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictionaryListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DictionaryListResponseValidationError{
				field:  "PageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DictionaryListResponseValidationError is the validation error returned by
// DictionaryListResponse.Validate if the designated constraints aren't met.
type DictionaryListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictionaryListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictionaryListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictionaryListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictionaryListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictionaryListResponseValidationError) ErrorName() string {
	return "DictionaryListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DictionaryListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictionaryListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictionaryListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictionaryListResponseValidationError{}
